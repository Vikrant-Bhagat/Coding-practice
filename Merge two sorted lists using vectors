/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
        ListNode* temp=new ListNode();
        ListNode* list3=new ListNode();
        list3=temp;
        vector<int> vect;
        while(list1!=NULL){
            vect.push_back(list1->val);
            list1=list1->next;
        }
        while(list2!=NULL){
            vect.push_back(list2->val);
            list2=list2->next;
        }
        int n=vect.size();
        sort(vect.begin(),vect.end());
        for(int i=0;i<vect.size();i++){
            list3->next=new ListNode(vect[i]);
            list3=list3->next;
        }
        return temp->next;
        
        // ListNode* result=NULL;
        // if(list1==NULL){
        //     return list2;
        // }
        // else if(list2==NULL){
        //     return list1;
        // }
        // if(list1->val<=list2->val){
        //     result=list1;
        //     result->next=mergeTwoLists(list1->next,list2);
        // }
        // else{
        //     result=list2;
        //     result->next=mergeTwoLists(list1,list2->next);
        // }
        // return result;
    }
};
