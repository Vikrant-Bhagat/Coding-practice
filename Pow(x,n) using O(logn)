class Solution{
    public:
    double myPow(double x, long n) {
        double ans = 1.0;
        long long nn=n;
        if(nn<0){
            nn=-1*nn;
        }
        if(x==0){
            ans=0;
        }
        if(n==0){
            ans =1;
        }
            while(nn){
                if(nn%2==0){
                    x=x*x;
                    nn=nn/2;
                }
                else{
                    ans=ans*x;
                    nn=nn-1;
                }
            }
       
        if(n<0){
            ans = (double)(1*1.0)/(double)(ans);
        }
        return ans;
    }
    
};
        
        
        
        
        // double prod = 1.0;
       //  for(int i=0;i<n;i++){
       //      prod = prod*x;
       //  }
       //  return prod;
//        if(x < 0)
//        {
//            if(n%2 == 0)
//                return myPow(-1*x,n);
//            else 
//                return (-1.00)*myPow(-1*x,n);
//        }
//        if(n < 0){
//            return 1/myPow(x,-1*n);
//        }
        
//        if(n==0) return 1;
        
//        if(n%2==0) return myPow(x,n/2)*myPow(x,n/2);
//        if(n%2==1) return myPow(x,n/2)*myPow(x,n/2)*x;
//        return 1;
        
    //     double ans = 1;
    //     double positional_value = x;
    //     while(n > 0)
    //     {
    //         if(n%2==1)
    //         {
    //             ans *= positional_value;
    //         }
    //         positional_value = positional_value*positional_value;
    //         n/=2;
    //     }
    //     return ans;
    // }
    
